name: Build Logalizer
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            archiver: "7z a"
          - os: ubuntu-latest
            triplet: x64-linux
            archiver: "7z a"
          - os: macos-latest
            triplet: x64-osx
            archiver: "7za a"
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

    steps:
    # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
    # for Binary Caching.
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
      # when it is being run afterwards by CMake.
      - name: Restore vcpkg
        uses: actions/cache@v3
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
            !${{ env.VCPKG_ROOT }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install
      # the dependencies as specified in vcpkg.json. Note that the vcpkg's toolchain is specified
      # in the CMakePresets.json file.
      # This step also runs vcpkg with Binary Caching leveraging GitHub Action cache to
      # store the built packages artifacts.
      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset ninja-multi-vcpkg
      
      # Build (Release configuration only) the whole project with Ninja (which is spawn by CMake).
      #
      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the `--config` flag, e.g.:
      # run: cmake --build --preset ninja-vcpkg --config Release
      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-multi-vcpkg-release
      
      # Test the whole project with CTest, again Release configuration only.
      - name: Test (Release configuration)
        run: |
          ctest --preset ninja-multi-vcpkg-release --verbose

      # Install binaries
      - name: Install Strip
        shell: bash
        run: cmake --install build/ninja-multi-vcpkg --strip
      
      # Pack install directory
      - name: Pack
        shell: bash
        working-directory: build/ninja-multi-vcpkg/bin
        run: |
          ls -laR
          ${{ matrix.archiver }} ../logalizer_${{ matrix.os }}.7z .

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: build/ninja-multi-vcpkg/logalizer_${{ matrix.os }}.7z
          name: logalizer_${{ matrix.os }}.7z

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/ninja-multi-vcpkg/logalizer_${{ matrix.os }}.7z
          asset_name: logalizer_${{ matrix.os }}.7z
          asset_content_type: application/zip

